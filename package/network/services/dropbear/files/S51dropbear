#!/bin/sh

[ -f "/opt/etc/config/dropbear.conf" ] && . /opt/etc/config/dropbear.conf

PID_FILE="/opt/var/run/dropbear.pid"

ENABLED=yes
PROCS="dropbear"
PROG=/opt/sbin/dropbear
ARGS="-p $PORT -P $PID_FILE"
DESC="Dropbear ssh"

### colors
ansi_std="\033[0;0m"
ansi_red="\033[1;31m"
ansi_green="\033[1;32m"
ansi_yellow="\033[1;33m"
ansi_cyan="\033[1;36m"
ansi_white="\033[1;37m"

### columns
COLUMNS="45"

### timer
COUNTER=0
LIMIT=${LIMIT:-10}

### 4start
ACTION="$1"

#. /opt/etc/init.d/rc.func

do_start() {
  [ "$ENABLED" = "yes" ] || return 1
  printf "$ansi_white %-${COLUMNS}s $ansi_std" "Starting $DESC ..."
  $PROG $ARGS > /dev/null 2>&1 &
  while [ ! -f $PID_FILE ] && [ "$COUNTER" -le "$LIMIT" ]; do
    COUNTER="$((COUNTER + 1))" && sleep 1
  done
  if [ ! -f $PID_FILE ] && [ ! -d /proc/"$(cat $PID_FILE)" ]; then
    printf "$ansi_red %-${COLUMNS}s $ansi_std\n" "failed."
    logger "Failed to start $DESC from $CALLER."
    return 255
  else
    printf "$ansi_green %-${COLUMNS}s $ansi_std\n" "done."
    logger "Started $DESC from $CALLER."
    return 0
  fi
}

do_stop() {
  [ "$ENABLED" = "yes" ] || return 1
  printf "$ansi_white %-${COLUMNS}s $ansi_std" "Shutting down $DESC ..."
  kill "$(cat $PID_FILE)" 2>/dev/null
  while [ -f "$PID_FILE" ] && [ "$COUNTER" -le "$LIMIT" ]; do
    COUNTER="$((COUNTER + 1))" && sleep 1
  done
  if [ -f $PID_FILE ] && [ -d /proc/"$(cat $PID_FILE)" ]; then
    printf "$ansi_red %-${COLUMNS}s $ansi_std\n" "failed."
    logger "Failed to stop $DESC."
    return 255
  else
    printf "$ansi_green %-${COLUMNS}s $ansi_std\n" "done."
    logger "The $DESC service has been stopped."
    return 0
  fi
}

do_check() {
  printf "$ansi_white %-${COLUMNS}s $ansi_std" "Checking status $DESC ..."
  if [ "$ENABLED" != "yes" ]; then
    printf "$ansi_cyan %-${COLUMNS}s $ansi_std\n" "autorun disabled."
    return 0
  elif [ "$ACTION" = "start" ] \
    && [ -f $PID_FILE ] && [ -d /proc/"$(cat $PID_FILE)" ]; then
      printf "$ansi_yellow %-${COLUMNS}s $ansi_std\n" "already running."
      return 0
  elif [ -f $PID_FILE ] && [ -d /proc/"$(cat $PID_FILE)" ]; then
    printf "$ansi_green %-${COLUMNS}s $ansi_std\n" "alive."
    return 0
  else
    printf "$ansi_red %-${COLUMNS}s $ansi_std\n" "dead."
    return 1
  fi
}

do_enable() {
  printf "$ansi_white %-${COLUMNS}s $ansi_std" "Enabling autorun $DESC ..."
  if [ "$ENABLED" != "yes" ]; then
    sed -i 's,^ENABLED=no,ENABLED=yes,' "$0"
    printf "$ansi_green %-${COLUMNS}s $ansi_std\n" "done."
    return 0
  else
    printf "$ansi_yellow %-${COLUMNS}s $ansi_std\n" "already enabled."
    return 0
  fi
}

do_disable() {
  printf "$ansi_white %-${COLUMNS}s $ansi_std" "Disabling autorun $DESC ..."
  if [ "$ENABLED" = "yes" ]; then
    sed -i 's,^ENABLED=yes,ENABLED=no,' "$0"
    printf "$ansi_green %-${COLUMNS}s $ansi_std\n" "done."
    return 0
  else
    printf "$ansi_yellow %-${COLUMNS}s $ansi_std\n" "already disabled."
    return 0
  fi
}

case "$ACTION" in
    start)
        do_check || do_start
    ;;
    kill|stop)
        do_check && do_stop
    ;;
    restart)
        ( do_check > /dev/null && do_stop ) || do_check
        do_check > /dev/null || do_start
    ;;
    check|status)
        do_check
    ;;
#    reconfigure|reload)
#        ( do_check && do_reload ) || do_start
#    ;;
    enable)
        do_enable
    ;;
    disable)
        do_disable
    ;;
    *)
        printf "$ansi_white %-${COLUMNS}s %-${COLUMNS}s $ansi_std\n" "Usage: $0" "{start|[kill|stop]|restart|[check|status]}"
        exit 1
    ;;
esac

exit 0
