--- a/src/apk.c
+++ b/src/apk.c
@@ -430,7 +430,7 @@ static void setup_automatic_flags(struct
 		ac->progress.out = &ac->out;
 
 	if (!(ac->flags & APK_SIMULATE) &&
-	    access("/etc/apk/interactive", F_OK) == 0)
+	    access("/opt/etc/apk/interactive", F_OK) == 0)
 		ac->flags |= APK_INTERACTIVE;
 }
 
--- a/src/app_audit.c
+++ b/src/app_audit.c
@@ -372,6 +372,8 @@ recurse_check:
 			char target[20];
 			ssize_t n;
 			n = readlinkat(dirfd, name, target, sizeof target);
+			if (n == 16 && memcmp(target, "/opt/bin/busybox", 16) == 0)
+				goto done;
 			if (n == 12 && memcmp(target, "/bin/busybox", 12) == 0)
 				goto done;
 			if (n == 11 && memcmp(target, "/bin/bbsuid", 11) == 0)
--- a/src/app_convdb.c
+++ b/src/app_convdb.c
@@ -213,12 +213,12 @@ static int conv_main(void *pctx, struct
 	adb_wo_alloca(&ctx->pkgs, &schema_package_adb_array, &ctx->dbi);
 
 	apk_tar_parse(
-		apk_istream_from_file(root_fd, "lib/apk/db/scripts.tar"),
+		apk_istream_from_file(root_fd, "opt/lib/apk/db/scripts.tar"),
 		read_script, ctx, apk_ctx_get_id_cache(ac));
 
-	read_triggers(ctx, apk_istream_from_file(root_fd, "lib/apk/db/triggers"));
+	read_triggers(ctx, apk_istream_from_file(root_fd, "opt/lib/apk/db/triggers"));
 
-	convert_idb(ctx, apk_istream_from_file(root_fd, "lib/apk/db/installed"));
+	convert_idb(ctx, apk_istream_from_file(root_fd, "opt/lib/apk/db/installed"));
 
 	adb_wo_obj(&idb, ADBI_IDB_PACKAGES, &ctx->pkgs);
 	adb_w_rootobj(&idb);
--- a/src/commit.c
+++ b/src/commit.c
@@ -248,7 +248,7 @@ static int run_commit_hook(void *ctx, in
 
 	if (file[0] == '.') return 0;
 	if ((db->ctx->flags & (APK_NO_SCRIPTS | APK_SIMULATE)) != 0) return 0;
-	if (apk_fmt(fn, sizeof fn, "etc/apk/commit_hooks.d/%s", file) < 0) return 0;
+	if (apk_fmt(fn, sizeof fn, "opt/etc/apk/commit_hooks.d/%s", file) < 0) return 0;
 
 	if ((db->ctx->flags & APK_NO_COMMIT_HOOKS) != 0) {
 		apk_msg(out, "Skipping: %s %s", fn, commit_hook_str[hook->type]);
@@ -265,7 +265,7 @@ static int run_commit_hook(void *ctx, in
 static int run_commit_hooks(struct apk_database *db, int type)
 {
 	struct apk_commit_hook hook = { .db = db, .type = type };
-	return apk_dir_foreach_file(openat(db->root_fd, "etc/apk/commit_hooks.d", O_RDONLY | O_CLOEXEC),
+	return apk_dir_foreach_file(openat(db->root_fd, "opt/etc/apk/commit_hooks.d", O_RDONLY | O_CLOEXEC),
 				    run_commit_hook, &hook);
 }
 
--- a/src/context.c
+++ b/src/context.c
@@ -43,8 +43,8 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 		ac->open_flags |= APK_OPENF_READ;
 	}
 	if (ac->flags & APK_ALLOW_UNTRUSTED) ac->trust.allow_untrusted = 1;
-	if (!ac->cache_dir) ac->cache_dir = "etc/apk/cache";
-	if (!ac->keys_dir) ac->keys_dir = "etc/apk/keys";
+	if (!ac->cache_dir) ac->cache_dir = "opt/etc/apk/cache";
+	if (!ac->keys_dir) ac->keys_dir = "opt/etc/apk/keys";
 	if (!ac->root) ac->root = "/";
 	if (!ac->cache_max_age) ac->cache_max_age = 4*60*60; /* 4 hours default */
 
@@ -53,7 +53,7 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 		ac->flags |= APK_NO_CHROOT;
 
 		// Check uvol availability
-		ac->uvol = "/usr/sbin/uvol";
+		ac->uvol = "/opt/sbin/uvol";
 		if (access(ac->uvol, X_OK) != 0)
 			ac->uvol = ERR_PTR(-APKE_UVOL_NOT_AVAILABLE);
 	} else {
@@ -88,11 +88,11 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 	}
 
 	if ((ac->open_flags & APK_OPENF_WRITE) && !(ac->flags & APK_NO_LOGFILE)) {
-		const char *log_path = "var/log/apk.log";
+		const char *log_path = "opt/var/log/apk.log";
 		const int lflags = O_WRONLY | O_APPEND | O_CREAT | O_CLOEXEC;
 		int fd = openat(ac->root_fd, log_path, lflags, 0644);
 		if (fd < 0 && (ac->open_flags & APK_OPENF_CREATE)) {
-			apk_make_dirs(ac->root_fd, "var/log", 0755, 0755);
+			apk_make_dirs(ac->root_fd, "opt/var/log", 0755, 0755);
 			fd = openat(ac->root_fd, log_path, lflags, 0644);
 		}
 		if (fd < 0) {
--- a/src/database.c
+++ b/src/database.c
@@ -46,10 +46,10 @@ enum {
 };
 
 static const char * const apkindex_tar_gz = "APKINDEX.tar.gz";
-static const char * const apk_static_cache_dir = "var/cache/apk";
-static const char * const apk_world_file = "etc/apk/world";
-static const char * const apk_arch_file = "etc/apk/arch";
-static const char * const apk_lock_file = "lib/apk/db/lock";
+static const char * const apk_static_cache_dir = "opt/var/cache/apk";
+static const char * const apk_world_file = "opt/etc/apk/world";
+static const char * const apk_arch_file = "opt/etc/apk/arch";
+static const char * const apk_lock_file = "opt/lib/apk/db/lock";
 
 static struct apk_db_acl *apk_default_acl_dir, *apk_default_acl_file;
 
@@ -1625,8 +1625,8 @@ static void unmount_proc(struct apk_data
 const char *apk_db_layer_name(int layer)
 {
 	switch (layer) {
-	case APK_DB_LAYER_ROOT: return "lib/apk/db";
-	case APK_DB_LAYER_UVOL: return "tmp/run/uvol/.meta/apk";
+	case APK_DB_LAYER_ROOT: return "opt/lib/apk/db";
+	case APK_DB_LAYER_UVOL: return "opt/tmp/run/uvol/.meta/apk";
 	default:
 		assert(!"invalid layer");
 		return 0;
@@ -1764,10 +1764,10 @@ int apk_db_open(struct apk_database *db,
 		add_protected_paths_from_istream(db, ac->protected_paths);
 		ac->protected_paths = NULL;
 	} else {
-		blob = APK_BLOB_STR("+etc\n" "@etc/init.d\n" "!etc/apk\n");
+		blob = APK_BLOB_STR("+opt/etc\n" "@opt/etc/init.d\n" "!opt/etc/apk\n");
 		apk_blob_for_each_segment(blob, "\n", add_protected_path, db);
 
-		apk_dir_foreach_file(openat(db->root_fd, "etc/apk/protected_paths.d", O_RDONLY | O_CLOEXEC),
+		apk_dir_foreach_file(openat(db->root_fd, "opt/etc/apk/protected_paths.d", O_RDONLY | O_CLOEXEC),
 				     add_protected_paths_from_file, db);
 	}
 
@@ -1812,8 +1812,8 @@ int apk_db_open(struct apk_database *db,
 
 	if (!(ac->open_flags & APK_OPENF_NO_SYS_REPOS)) {
 		if (ac->repositories_file == NULL) {
-			add_repos_from_file(db, db->root_fd, "etc/apk/repositories");
-			apk_dir_foreach_file(openat(db->root_fd, "etc/apk/repositories.d", O_RDONLY | O_CLOEXEC),
+			add_repos_from_file(db, db->root_fd, "opt/etc/apk/repositories");
+			apk_dir_foreach_file(openat(db->root_fd, "opt/etc/apk/repositories.d", O_RDONLY | O_CLOEXEC),
 					     add_repos_from_file, db);
 		} else {
 			add_repos_from_file(db, AT_FDCWD, ac->repositories_file);
@@ -1941,8 +1941,8 @@ int apk_db_write_config(struct apk_datab
 		return 0;
 
 	if (db->ctx->open_flags & APK_OPENF_CREATE) {
-		apk_make_dirs(db->root_fd, "lib/apk/db", 0755, 0755);
-		apk_make_dirs(db->root_fd, "etc/apk", 0755, 0755);
+		apk_make_dirs(db->root_fd, "opt/lib/apk/db", 0755, 0755);
+		apk_make_dirs(db->root_fd, "opt/etc/apk", 0755, 0755);
 	} else if (db->lock_fd == 0) {
 		apk_err(out, "Refusing to write db without write lock!");
 		return -1;
@@ -2087,7 +2087,7 @@ int apk_db_run_script(struct apk_databas
 	int status;
 	pid_t pid;
 	static char * const clean_environment[] = {
-		"PATH=/usr/sbin:/usr/bin:/sbin:/bin",
+		"PATH=/opt/usr/sbin:/opt/usr/bin:/opt/sbin:/opt/bin:/usr/sbin:/usr/bin:/sbin:/bin",
 		NULL
 	};
 
@@ -2878,7 +2878,7 @@ static uint8_t apk_db_migrate_files_for_
 			continue;
 		}
 		// Used for passwd/group check later
-		inetc = !apk_blob_compare(dirname, APK_BLOB_STRLIT("etc"));
+		inetc = !apk_blob_compare(dirname, APK_BLOB_STRLIT("opt/etc"));
 
 		dir->modified = 1;
 		hlist_for_each_entry_safe(file, fc, fn, &diri->owned_files, diri_files_list) {
--- a/src/io.c
+++ b/src/io.c
@@ -1215,7 +1215,7 @@ static void idcache_load_users(int root_
 	if (!idh->empty) return;
 	idh->empty = 0;
 
-	in = fopenat(root_fd, "etc/passwd");
+	in = fopenat(root_fd, "opt/etc/passwd");
 	if (!in) return;
 
 	do {
@@ -1248,7 +1248,7 @@ static void idcache_load_groups(int root
 	if (!idh->empty) return;
 	idh->empty = 0;
 
-	in = fopenat(root_fd, "etc/group");
+	in = fopenat(root_fd, "opt/etc/group");
 	if (!in) return;
 
 	do {
--- a/src/package.c
+++ b/src/package.c
@@ -755,7 +755,7 @@ int apk_ipkg_run_script(struct apk_insta
 	// Then changed ro /var/cache/misc, but that is also often 'noexec'.
 	// /run was consider as it's tmpfs, but it also might be changing to 'noexec'.
 	// So use for now /lib/apk/exec even if it is not of temporary nature.
-	static const char script_exec_dir[] = "lib/apk/exec";
+	static const char script_exec_dir[] = "opt/lib/apk/exec";
 	struct apk_out *out = &db->ctx->out;
 	struct apk_package *pkg = ipkg->pkg;
 	char fn[PATH_MAX];
