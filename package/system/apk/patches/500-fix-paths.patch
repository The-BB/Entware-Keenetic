--- a/src/apk.c
+++ b/src/apk.c
@@ -429,7 +429,7 @@ static void setup_automatic_flags(struct
 	if ((tmp = getenv("TERM")) != NULL && strcmp(tmp, "dumb") == 0)
 		ac->out.progress_disable = 1;
 
-	if (!(ac->flags & APK_SIMULATE) && access("/etc/apk/interactive", F_OK) == 0)
+	if (!(ac->flags & APK_SIMULATE) && access("/opt/etc/apk/interactive", F_OK) == 0)
 		ac->flags |= APK_INTERACTIVE;
 }
 
@@ -441,8 +441,8 @@ static int load_config(struct apk_ctx *a
 	apk_blob_t space = APK_BLOB_STRLIT(" "), line, key, value;
 	int r;
 
-	is = apk_istream_from_file(AT_FDCWD, getenv("APK_CONFIG") ?: "/etc/apk/config");
-	if (is == ERR_PTR(-ENOENT)) is = apk_istream_from_file(AT_FDCWD, "/lib/apk/config");
+	is = apk_istream_from_file(AT_FDCWD, getenv("APK_CONFIG") ?: "/opt/etc/apk/config");
+	if (is == ERR_PTR(-ENOENT)) is = apk_istream_from_file(AT_FDCWD, "/opt/lib/apk/config");
 	if (IS_ERR(is)) return PTR_ERR(is);
 
 	while (apk_istream_get_delim(is, newline, &line) == 0) {
--- a/src/app_audit.c
+++ b/src/app_audit.c
@@ -75,6 +75,13 @@ static int audit_option_parse(void *appl
 		protected_paths_istream(ac,
 			apk_istream_from_blob(&actx->blob_istream,
 				APK_BLOB_STRLIT(
+					"+opt/etc\n"
+					"@opt/etc/init.d\n"
+					"-opt/home\n"
+					"-opt/lib/apk\n"
+					"-opt/root\n"
+					"-opt/tmp\n"
+					"-opt/var\n"
 					"+etc\n"
 					"@etc/init.d\n"
 					"-dev\n"
@@ -365,6 +372,8 @@ recurse_check:
 			char target[20];
 			ssize_t n;
 			n = readlinkat(dirfd, name, target, sizeof target);
+			if (n == 16 && memcmp(target, "/opt/bin/busybox", 16) == 0)
+				goto done;
 			if (n == 12 && memcmp(target, "/bin/busybox", 12) == 0)
 				goto done;
 			if (n == 11 && memcmp(target, "/bin/bbsuid", 11) == 0)
--- a/src/app_convdb.c
+++ b/src/app_convdb.c
@@ -209,12 +209,12 @@ static int conv_main(void *pctx, struct
 	adb_wo_alloca(&ctx->pkgs, &schema_package_adb_array, &ctx->dbi);
 
 	apk_tar_parse(
-		apk_istream_from_file(root_fd, "lib/apk/db/scripts.tar"),
+		apk_istream_from_file(root_fd, "opt/lib/apk/db/scripts.tar"),
 		read_script, ctx, apk_ctx_get_id_cache(ac));
 
-	read_triggers(ctx, apk_istream_from_file(root_fd, "lib/apk/db/triggers"));
+	read_triggers(ctx, apk_istream_from_file(root_fd, "opt/lib/apk/db/triggers"));
 
-	convert_idb(ctx, apk_istream_from_file(root_fd, "lib/apk/db/installed"));
+	convert_idb(ctx, apk_istream_from_file(root_fd, "opt/lib/apk/db/installed"));
 
 	adb_wo_obj(&idb, ADBI_IDB_PACKAGES, &ctx->pkgs);
 	adb_w_rootobj(&idb);
--- a/src/commit.c
+++ b/src/commit.c
@@ -258,7 +258,7 @@ static int run_commit_hook(void *ctx, in
 
 	if (file[0] == '.') return 0;
 	if ((db->ctx->flags & (APK_NO_SCRIPTS | APK_SIMULATE)) != 0) return 0;
-	if (apk_fmt(fn, sizeof fn, "etc/apk/commit_hooks.d/%s", file) < 0) return 0;
+	if (apk_fmt(fn, sizeof fn, "opt/etc/apk/commit_hooks.d/%s", file) < 0) return 0;
 
 	if ((db->ctx->flags & APK_NO_COMMIT_HOOKS) != 0) {
 		apk_msg(out, "Skipping: %s %s", fn, commit_hook_str[hook->type]);
@@ -275,7 +275,7 @@ static int run_commit_hook(void *ctx, in
 static int run_commit_hooks(struct apk_database *db, int type)
 {
 	struct apk_commit_hook hook = { .db = db, .type = type };
-	return apk_dir_foreach_file(openat(db->root_fd, "etc/apk/commit_hooks.d", O_DIRECTORY | O_RDONLY | O_CLOEXEC),
+	return apk_dir_foreach_file(openat(db->root_fd, "opt/etc/apk/commit_hooks.d", O_DIRECTORY | O_RDONLY | O_CLOEXEC),
 				    run_commit_hook, &hook);
 }
 
--- a/src/context.c
+++ b/src/context.c
@@ -55,7 +55,7 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 		ac->open_flags |= APK_OPENF_READ;
 	}
 	if (ac->flags & APK_ALLOW_UNTRUSTED) ac->trust.allow_untrusted = 1;
-	if (!ac->cache_dir) ac->cache_dir = "etc/apk/cache";
+	if (!ac->cache_dir) ac->cache_dir = "opt/etc/apk/cache";
 	else ac->cache_dir_set = 1;
 	if (!ac->root) ac->root = "/";
 	if (ac->cache_predownload) ac->cache_packages = 1;
@@ -65,7 +65,7 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 		ac->flags |= APK_NO_CHROOT;
 
 		// Check uvol availability
-		if (!ac->uvol) ac->uvol = "/usr/sbin/uvol";
+		if (!ac->uvol) ac->uvol = "/opt/sbin/uvol";
 	} else {
 		ac->root_set = 1;
 		if (!ac->uvol) ac->uvol = ERR_PTR(-APKE_UVOL_ROOT);
@@ -100,11 +100,11 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 	}
 
 	if ((ac->open_flags & APK_OPENF_WRITE) && !(ac->flags & APK_NO_LOGFILE)) {
-		const char *log_path = "var/log/apk.log";
+		const char *log_path = "opt/var/log/apk.log";
 		const int lflags = O_WRONLY | O_APPEND | O_CREAT | O_CLOEXEC;
 		int fd = openat(ac->root_fd, log_path, lflags, 0644);
 		if (fd < 0 && (ac->open_flags & APK_OPENF_CREATE)) {
-			apk_make_dirs(ac->root_fd, "var/log", 0755, 0755);
+			apk_make_dirs(ac->root_fd, "opt/var/log", 0755, 0755);
 			fd = openat(ac->root_fd, log_path, lflags, 0644);
 		}
 		if (fd < 0) {
@@ -134,8 +134,8 @@ struct apk_trust *apk_ctx_get_trust(stru
 			apk_dir_foreach_config_file(ac->root_fd,
 				__apk_ctx_load_pubkey, &ac->trust,
 				NULL,
-				"etc/apk/keys",
-				"lib/apk/keys",
+				"opt/etc/apk/keys",
+				"opt/lib/apk/keys",
 				NULL);
 		} else {
 			apk_dir_foreach_file(
--- a/src/database.c
+++ b/src/database.c
@@ -43,10 +43,10 @@
 #include "apk_adb.h"
 #include "apk_fs.h"
 
-static const char * const apk_static_cache_dir = "var/cache/apk";
-static const char * const apk_world_file = "etc/apk/world";
-static const char * const apk_arch_file = "etc/apk/arch";
-static const char * const apk_lock_file = "lib/apk/db/lock";
+static const char * const apk_static_cache_dir = "opt/var/cache/apk";
+static const char * const apk_world_file = "opt/etc/apk/world";
+static const char * const apk_arch_file = "opt/etc/apk/arch";
+static const char * const apk_lock_file = "opt/lib/apk/db/lock";
 
 static struct apk_db_acl *apk_default_acl_dir, *apk_default_acl_file;
 
@@ -1831,8 +1831,8 @@ static int setup_cache(struct apk_databa
 const char *apk_db_layer_name(int layer)
 {
 	switch (layer) {
-	case APK_DB_LAYER_ROOT: return "lib/apk/db";
-	case APK_DB_LAYER_UVOL: return "tmp/run/uvol/.meta/apk";
+	case APK_DB_LAYER_ROOT: return "opt/lib/apk/db";
+	case APK_DB_LAYER_UVOL: return "opt/lib/apk/db-uvol";
 	default:
 		assert(!"invalid layer");
 		return 0;
@@ -1976,11 +1976,11 @@ int apk_db_open(struct apk_database *db)
 		apk_db_parse_istream(db, ac->protected_paths, apk_db_add_protected_path);
 		ac->protected_paths = NULL;
 	} else {
-		apk_db_add_protected_path(db, APK_BLOB_STR("+etc"));
-		apk_db_add_protected_path(db, APK_BLOB_STR("@etc/init.d"));
-		apk_db_add_protected_path(db, APK_BLOB_STR("!etc/apk"));
+		apk_db_add_protected_path(db, APK_BLOB_STR("+opt/etc"));
+		apk_db_add_protected_path(db, APK_BLOB_STR("@opt/etc/init.d"));
+		apk_db_add_protected_path(db, APK_BLOB_STR("!opt/etc/apk"));
 
-		apk_dir_foreach_file(openat(db->root_fd, "etc/apk/protected_paths.d", O_DIRECTORY | O_RDONLY | O_CLOEXEC),
+		apk_dir_foreach_file(openat(db->root_fd, "opt/etc/apk/protected_paths.d", O_DIRECTORY | O_RDONLY | O_CLOEXEC),
 				     add_protected_paths_from_file, db);
 	}
 
@@ -2032,12 +2032,12 @@ int apk_db_open(struct apk_database *db)
 
 	if (!(ac->open_flags & APK_OPENF_NO_SYS_REPOS)) {
 		if (ac->repositories_file == NULL) {
-			add_repos_from_file(db, db->root_fd, "etc/apk/repositories");
+			add_repos_from_file(db, db->root_fd, "opt/etc/apk/repositories");
 			apk_dir_foreach_config_file(db->root_fd,
 				add_repos_from_file, db,
 				file_ends_with_dot_list,
-				"etc/apk/repositories.d",
-				"lib/apk/repositories.d",
+				"opt/etc/apk/repositories.d",
+				"opt/lib/apk/repositories.d",
 				NULL);
 		} else {
 			add_repos_from_file(db, AT_FDCWD, ac->repositories_file);
@@ -2181,8 +2181,8 @@ int apk_db_write_config(struct apk_datab
 		return 0;
 
 	if (db->ctx->open_flags & APK_OPENF_CREATE) {
-		apk_make_dirs(db->root_fd, "lib/apk/db", 0755, 0755);
-		apk_make_dirs(db->root_fd, "etc/apk", 0755, 0755);
+		apk_make_dirs(db->root_fd, "opt/lib/apk/db", 0755, 0755);
+		apk_make_dirs(db->root_fd, "opt/etc/apk", 0755, 0755);
 	} else if (db->lock_fd == 0) {
 		apk_err(out, "Refusing to write db without write lock!");
 		return -1;
@@ -2337,7 +2337,7 @@ int apk_db_run_script(struct apk_databas
 {
 	struct apk_out *out = &db->ctx->out;
 	static char * const clean_environment[] = {
-		"PATH=/usr/sbin:/usr/bin:/sbin:/bin",
+		"PATH=/opt/usr/sbin:/opt/usr/bin:/opt/sbin:/opt/bin:/usr/sbin:/usr/bin:/sbin:/bin",
 		NULL
 	};
 	const char *argv0 = apk_last_path_segment(argv[0]);
--- a/src/io.c
+++ b/src/io.c
@@ -1266,7 +1266,7 @@ static void idcache_load_users(int root_
 	if (!idh->empty) return;
 	idh->empty = 0;
 
-	in = fopenat(root_fd, "etc/passwd");
+	in = fopenat(root_fd, "opt/etc/passwd");
 	if (!in) return;
 
 	do {
@@ -1299,7 +1299,7 @@ static void idcache_load_groups(int root
 	if (!idh->empty) return;
 	idh->empty = 0;
 
-	in = fopenat(root_fd, "etc/group");
+	in = fopenat(root_fd, "opt/etc/group");
 	if (!in) return;
 
 	do {
--- a/src/package.c
+++ b/src/package.c
@@ -765,7 +765,7 @@ int apk_ipkg_run_script(struct apk_insta
 {
 	// When memfd_create is not available store the script in /lib/apk/exec
 	// and hope it allows executing.
-	static const char script_exec_dir[] = "lib/apk/exec";
+	static const char script_exec_dir[] = "opt/lib/apk/exec";
 	struct apk_out *out = &db->ctx->out;
 	struct apk_package *pkg = ipkg->pkg;
 	const char *reason = "failed to execute: ";
